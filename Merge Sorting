#include "Comp.h"

//---------------------------------------------------------------
//***************************************************************
//My MergeSort
/*
template <typename E, typename Comp>
void merge(E A[], E temp[], int left, int right);

template <typename E, typename Comp>
void mergesort(E A[], int n) {
	E* B = new E[n];
	//for (int i = 0; i < n; ++i)  根本不需要！
		//B[i] = A[i];
	merge<E,Comp>(A, B, 0, n - 1);
}

template <typename E, typename Comp>
void merge(E A[], E temp[], int left, int right) {
	if (left == right)
		return;
	int mid = (left + right) / 2;
	merge<E, Comp>(A, temp, left, mid);
	merge<E, Comp>(A, temp, mid + 1, right);
	int l = left;
	int r = mid + 1;
	int count = left;
	for (int i = left; i <= right; ++i)
		temp[i] = A[i];                      //极其重要！！
	while (count < right + 1) {
		if (l > mid && r <= right) {       //左边子数组已空，只取右边
			while (r <= right)
				A[count++] = temp[r++];
			return;
		}
		if (r > right && l <= mid) {       //右边子数组已空，只取左边
			while (l <= mid)
				A[count++] = temp[l++];
			return;
		}
		if (Comp::prior(temp[l], temp[r])) //注意这里比较的是temp数组的值，需经过排序后才可以用，所以在上面要把A里面的值复制到temp里面去
			A[count++] = temp[l++];
		else
		    A[count++] = temp[r++];
	}
}
*/
//*******************************************************************
//-------------------------------------------------------------------
//-----------------------------------------------------------------
//*****************************************************************
//Optimized Version

#include "Insert Sort.h"

#define THRESHOLD 1

template <typename E, typename Comp>
void merge(E A[], E temp[], int left, int right);

template <typename E, typename Comp>
void mergesort(E A[], int n) {
	E* B = new E[n];
	for (int i = 0; i < n; ++i)
		B[i] = A[i];
	merge<E,Comp>(A, B, 0, n - 1);
}

template <typename E, typename Comp>
void merge(E A[], E temp[], int left, int right) {

	if ((right - left) <= THRESHOLD) {
		inssort<E, Comp>(&A[left], right - left + 1);                        //对小数组使用Insertion Sort
		return;
	}                                                //不能单独把这段代码注释掉，如果这样做，则递归无返回，会溢出，应加入判断if (left == right) return;
	
	int i, j, k, mid = (left + right) / 2;

	merge<E, Comp>(A, temp, left, mid);
	merge<E, Comp>(A, temp, mid + 1, right);
	
	for (i = mid; i >= left; --i)
		temp[i] = A[i];                                                       //左数组正序复制

	for (j = 1; j <= right - mid; ++j)                                        //右数组倒序复制
		temp[right - j + 1] = A[j + mid];

	for (i = left, j = right, k = left; k <= right; ++k)
		if (Comp::prior(temp[i], temp[j]))
			A[k] = temp[i++];
		else
			A[k] = temp[j--];
}

//------------------------------------------
//******************************************
// test for Merge Sort

#include "Merge Sort.h"
int main() {
	int a[10] = {0,3,5,7,9,0,6,4,2,0};
	mergesort<int, Comp<int>>(a,10);
	for (int i = 0 ; i < 10; ++i)
		std::cout << a[i];
}

//*******************************************
//-------------------------------------------
